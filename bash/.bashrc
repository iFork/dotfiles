# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# Basic {{{1

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# Basic customization {{{1

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

# custom alias {{{1
alias hls='cd ~ && ls -lh'

# Terminal {{{1

#VTE (Virtual Terminal Emulator) Configuration for Tilix terminal
if [ $TILIX_ID ] || [ $VTE_VERSION ]; then
        source /etc/profile.d/vte.sh
fi
#On Ubuntu (16.04 or 16.10), a symlink is probably missing. You can create it with:
#ln -s /etc/profile.d/vte-2.91.sh /etc/profile.d/vte.sh

# npm command completion {{{1 

# installation of official version:
# source <(npm completion)

# modified version. 
# credit: https://gist.github.com/jamischarles/1669accda0f057df1769c6c0e932827f
# https://medium.com/@jamischarles/adding-autocomplete-to-npm-install-5efd3c424067
#
# This is a modified version of the script generated by
# https://docs.npmjs.com/cli/completion to include `npm install` autocompletion.
# Basically we added `if` blocks to check for `install` subcommand.
# Description:
# We run `ls ~/.npm` and pass all the results as options to bash/zsh
# autocompletion for the `npm install` command. ~/.npm is the location of the npm
# cache. This should contain any packages you’ve installed at some point

###-begin-npm-completion-###
#
# npm command completion script
#
# Installation: npm completion >> ~/.bashrc  (or ~/.zshrc)
# Or, maybe: npm completion > /usr/local/etc/bash_completion.d/npm
#
# for BASH
if type complete &>/dev/null; then
    _npm_completion () {
        local words cword
        if type _get_comp_words_by_ref &>/dev/null; then
            _get_comp_words_by_ref -n = -n @ -w words -i cword
        else
            cword="$COMP_CWORD"
            words=("${COMP_WORDS[@]}")
        fi

        local si="$IFS"


        # if your npm command includes `install` or `i `
        if [[ ${words[@]} =~ 'install' ]] || [[ ${words[@]} =~ 'i ' ]]; then
            local cur=${COMP_WORDS[COMP_CWORD]}

            # supply autocomplete words from `~/.npm`, with $cur being value of current expansion like 'expre'
            COMPREPLY=( $( compgen -W "$(ls ~/.npm )" -- $cur ) )
        else
            IFS=$'\n' COMPREPLY=($(COMP_CWORD="$cword" \
                COMP_LINE="$COMP_LINE" \
                COMP_POINT="$COMP_POINT" \
                npm completion -- "${words[@]}" \
                2>/dev/null)) || return $?
        fi

        IFS="$si"
    }
# bind the above function to `npm` autocompletion
complete -o default -F _npm_completion npm
# for ZSH
elif type compdef &>/dev/null; then
	_npm_completion() {
		local si=$IFS


		# if your npm command includes `install`
		if [[ ${words} =~ 'install' ]] || [[ ${words} =~ 'i ' ]]; then
			compadd -- $(COMP_CWORD=$((CURRENT-1)) \
				COMP_LINE=$BUFFER \
				COMP_POINT=0 \
				ls ~/.npm -- "${words[@]}" \
				2>/dev/null)

		else
			compadd -- $(COMP_CWORD=$((CURRENT-1)) \
				COMP_LINE=$BUFFER \
				COMP_POINT=0 \
				npm completion -- "${words[@]}" \
				2>/dev/null)
		fi

		IFS=$si
	}
compdef _npm_completion npm
elif type compctl &>/dev/null; then

	_npm_completion () {
		local cword line point words si
		read -Ac words
		read -cn cword
		let cword-=1
		read -l line
		read -ln point
		si="$IFS"
		IFS=$'\n' reply=($(COMP_CWORD="$cword" \
			COMP_LINE="$line" \
			COMP_POINT="$point" \
			npm completion -- "${words[@]}" \
			2>/dev/null)) || return $?
					IFS="$si"
				}
			compctl -K _npm_completion npm
fi
##-end-npm-completion-###

# vim {{{1

# Note on non-interactive shells {{{2

# NOTE: VIM and .bashrc aliases or functions
# when you run `!<cmd>` in vim or `/bin/bash -c <cmd>` from another shell you are
# launching an instance of bash in non-interactive mode. In non-interactive mode
# alias are not expanded and you get this error.
# [external command - Bash not recognizing aliases when run from Vim - Vi and Vim Stack Exchange](https://vi.stackexchange.com/questions/2950/bash-not-recognizing-aliases-when-run-from-vim)

# `~/.bash_profile` and `~/.bashrc` are not read by scripts, and functions are
# not exported by default. To do so, you can use **`export -f <myFuncName>`** 
# [How to define a Bash function that can be used by different scripts - Unix & Linux Stack Exchange](https://unix.stackexchange.com/questions/63665/how-to-define-a-bash-function-that-can-be-used-by-different-scripts)

# Limitation observed: exporting ag() for non-interactive shells - does not affect
# :Ag in vim 

# for more rigorous solution see also https://unix.stackexchange.com/a/148748/429305

# Search/ find/ grep {{{1

# Ag search {{{2

# Fixes issue: [.gitignore not taken into account when the current working directory is a subdirectory · Issue #144 · ggreer/the_silver_searcher](https://github.com/ggreer/the_silver_searcher/issues/144)
ag() {
  command ag \
    -p "$(git rev-parse --is-inside-work-tree &>/dev/null && echo "$(git rev-parse --show-toplevel)/.gitignore")" \
    "$@"
}
# exporting for non-interactive shells - does not affect :Ag in vim
# export -f ag

