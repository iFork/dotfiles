" Hints: start fold markers (fmr) used. Voom may outline this.

"
" Important vars {{{1
let $VIMHOME = $HOME."/.vim"
" let $MY_VIM_SCRIPTS = $VIMHOME."/my_scripts"	
let $MY_VIM_SCRIPTS = $HOME."/dotfiles/bootstrap/vim"	

"########################################
" Dependency Setup Automation {{{1
"########################################

" ----------------------------------------
" Automatic installation of vim-plug, if it's missing {{{2
" ----------------------------------------
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
"Note that --sync flag is used to block the execution until the installer finishes.
"NOTE: env dependency: curl (apt install curl)


"########################################
" Plugin Management : vim-plug {{{1
"########################################
" Cheatlist: vim-plug commands: 
" :PlugInstall, :PlugUpdate, 
" :PlugClean to remove undeclared plugins
" On-demand loading of plugins
" 	'on' command(s) invokation or/and for file type(s)
" e.g. 
" 	Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
" 	Plug 'junegunn/vim-github-dashboard', { 'on': ['GHDashboard', 'GHActivity'] }
"	" Code to execute when the plugin is lazily loaded on demand
" 	Plug 'junegunn/vader.vim',  { 'on': 'Vader', 'for': 'vader' }
"	autocmd! User vader.vim echom 'Vader is now loaded!'

"-----------------------------------------
" vim-plug Helpers {{{2
"-----------------------------------------
"-----------------------------------------
" vim-plug: Automatically install missing plugins on startup {{{3
"-----------------------------------------
autocmd VimEnter *
      \  if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
      \|   PlugInstall --sync | q
      \| endif

"-----------------------------------------
" Plugins setup functions {{{3
"-----------------------------------------
" Example: vim function
"function! BuildYCM(info)
"  " info is a dictionary with 3 fields
"  " - name:   name of the plugin
"  " - status: 'installed', 'updated', or 'unchanged'
"  " - force:  set on PlugInstall! or PlugUpdate!
"  if a:info.status == 'installed' || a:info.force
"    !./install.py
"  endif
"endfunction
function! Coc_plugin_setup()
	" check system dependencies
	echom 'Calling Coc_plugin_setup'
	echom $MY_VIM_SCRIPTS."/coc_plugin_setup.sh"
	!$MY_VIM_SCRIPTS/coc_plugin_setup.sh
	"TODO: call/pass to this func does not happen
endfunction
"-----------------------------------------
" Plugins {{{2
"-----------------------------------------
" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
silent! if plug#begin('~/.vim/plugged')
" Declare the list of plugins.

" (Optional) to register Vim help file for vim-plug itself
" as standard vim-plug installation misses its help file. `:h plug-toc
" credit: https://github.com/junegunn/vim-plug/issues/829#issuecomment-496852962
Plug 'junegunn/vim-plug'

" Themes ----- {{{3
" - gruvbox:
Plug 'morhetz/gruvbox'          " vim gruvbox color scheme
Plug 'sainnhe/gruvbox-material' "modified gruvbox
Plug 'altercation/vim-colors-solarized'  "theme solarazed
	"colors are off on gnome terminal with proper palette
	"in Konsol is acceptable only with same-name palette
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'arcticicestudio/nord-vim'
Plug 'rakr/vim-one'
Plug 'kyoz/purify', { 'rtp': 'vim' }
Plug 'blueshirts/darcula' "InteliJ

" General ----- {{{3

Plug 'vim-airline/vim-airline' 	 " statusline
Plug 'tpope/vim-eunuch' "Helpers for UNIX / Linux commands wrapper
Plug 'tpope/vim-repeat' "Enable repeating supported plugin maps with '.'
		" e.g. for easymotion
Plug 'easymotion/vim-easymotion' "Vim motions on speed
	" Cheatlist:
	" <leader><leader>w ; .. f<char> ; .. s<char>

Plug 'bronson/vim-visual-star-search' " Search via */# in visuaol mode
	" Cheatlist:
	" <leader>* (\*) recursively vimgreps
	" May change vimgrep to e.g. Ag see: <https://github.com/bronson/dotfiles/blob/a3ab0d6ee8d9e5e7f6e12444753330bab0200b0e/.vimrc#L344-L345>

" Project / file management ----- {{{3

Plug 'preservim/nerdtree' "file system explorer / project drawer
	"Issue: when mksession is run when some of NERDTree panes are
	"open - then loading such session fails.
	"Use either vim-session plugin 
	"or use vimpanel plugin instead of NERDTree 
	"or put workaround functions from 
	" https://stackoverflow.com/questions/4226905/vim-nerdtree-not-recovered-in-session-restore/42462073#42462073

Plug 'tpope/vim-obsession' " continuously updated session files
	" If I pass in a directory rather than a file name, just create a
	" Session.vim inside of it. 
	" Don't capture options and maps. Options are
	" sometimes mutilated and maps just interfere with updating plugins.

	" Use `:Obsess` (with optional file/directory name) to start recording to a
	" session file and `:Obsess!` to stop and throw it away.  That's it.  Load a
	" session in the usual manner: `vim -S`, or `:source` it.

	" ISSUE: pausing (via :Obsession toggle) does not work, records anyway.

" Plug 'dhruvasagar/vim-prosession' " switching between multiple sessions cleanly
	" Dependency: 'tpope/vim-obsession'
	" maintain one session per project (directory) and switch between them
	" when we need to switch context, automatically

	" `:Prosession` provides existing session paths from the sessions directory
	" from `g:prosession_dir` (set to `~/.vim/session/` by default) or also
	" completes paths from the file system which you can use to start new
	" sessions for them.
	" For more details check `:help prosession`.


" TODO: Drop vim-seesion as it seems to always auto-save, despite I have not 
" enables it, and not always restores what I expect to be saved in the session.
Plug 'xolox/vim-session'  " Extended session management for Vim
	"ISSUE:!ATTENTION! even 'options' is not saved in 'sessionoptions', plugin 
	"**installation or removal or update does not play nicely with saved sessions**,
	"calling deleted functions/mappings (e.g. w/ auto-pai baskspace) 
	"or new added plugin's functions throw ERRORS.
	"Reported : https://github.com/xolox/vim-session/issues/187
	"
	"ISSUE: when exiting not at once (i.e. not with :qa), only last window persists,
	"despite autosave is diabled. 
	" TO-Report ?
	"
	"Required: If you want NERDTree to not conflict with vim's 
	"session loading (after mksession).
	"Vim’s :mksession command isn’t really compatible with plug-ins that 
	"create buffers with generated content and because of this session.vim
	"includes specific workarounds for such plug-ins: 
	"•BufExplorer, Project and NERD tree windows are supported;
	"Cheatlist: h: session
	":SaveSession 
	":OpenSession 
	":OpenTabSession, :SaveTabSession, :AppendTabSession
Plug 'xolox/vim-misc' " scripts that are used by xolox's plug-ins 
		      "RequiredBy: xolox/vim-session 

Plug 'Xuyuanp/nerdtree-git-plugin' "for NERDTree to show git status flags
	"TODO: make on-demand loading {'on': 'Git'} "on fugitive commands
	"and echom - message to notify loading
" Plug 'low-ghost/nerdtree-fugitive'  "adds some fugitive functionality 
	"directly to nerdtree for vim
	
if has('unix')
	" Unix specific / non- 'win32' compatible plugin
	Plug 'junegunn/fzf', { 'do': { -> fzf#install() } } "fuzzy finder, main plugin
							"required by fzf.vim
	Plug 'junegunn/fzf.vim'
endif


Plug 'wakatime/vim-wakatime' "Time tracker, Productivity monitoring
	" :WakaTimeToday - echo your total coding activity for Today
	" dashboard: <https://wakatime.com/dashboard>


" git ----- {{{3
Plug 'tpope/vim-fugitive' "git wrapper
Plug 'airblade/vim-gitgutter' " sign column for git diffs
	" Cheatlist: :GitGutterEnable
	" Hunks
	" [c ]c 
	" stage the hunk with <Leader>hs, or undo it with <Leader>hu
	" hunk text object: ic, ac

Plug 'junegunn/gv.vim' " git commit browser
	" Alternative: 
		" > gitv is nice. But per author, this is faster, and possibly simpler alternative 
	" Dependency: 'vim-fugitive'
	" Cheatlist:
    " :GV to open commit browser
    "     You can pass git log options, e.g. :GV -S foobar.
    " :GV! only list commits that affected the current file
    " :GV? fills the location list with the revisions of the current file
	" :GV or :GV? can be used in visual mode to track the changes in the selected lines.
	" maps
	" o or <cr> on commits to display the diff in the range
	" O - new tab
	" gb for :Gbrowse
	" ]] and [[ to move


" Language semantics ----- {{{3

Plug 'majutsushi/tagbar' "sidebar that displays the ctags-generated 
			"tags of the current file, ordered by their scop
			"Dependency: ctags. recommended is universal-ctags.
			" https://github.com/universal-ctags/ctags/blob/master/docs/autotools.rst 

"Intellisense engine like VSCode, Language Server Protocol - Client
Plug 'neoclide/coc.nvim', {'do': function('Coc_plugin_setup'), 'branch': 'release' } 


" Syntax Highlighting {{{3

Plug 'jackguo380/vim-lsp-cxx-highlight' "C/C++/ObjC semantic highlighting 
					"using the language server protocol.
	"https://github.com/jackguo380/vim-lsp-cxx-highlight/blob/master/README.md 
	"TODO: configure / make it work after fixing clangd
	"Note: For vim +timers and +byte_offset are recommended but not required.
	"for clangd language server Requires coc.nvim and coc-clangd
	"For clangd coc-settings.json must have:
	"{
	"    "clangd.semanticHighlighting": "true"
	"}

" Plug 'othree/yajs.vim' " JavaScript syntax
	" Performance Issue:
	" yajs.vim is not good on performance. If you are using a slow computer. You might feel lag while moving the cursor. You can try disable cursorline and colorcolumn, or reduce the number of synmaxcol. Another possible solution is change to neovim
	" If you still want cursor line highlight, some terminal has their built-in support. Ex: iTerm2, Edit Profile -> Colors -> Cursor Colors.
	" Features :
	" Use 'javascript' as group name's prefix, not 'javaScript' nor 'JavaScript'. Works great with SyntaxComplete.
	" Recognize Web API and DOM keywords. Base on Mozilla's WebIDL files
	" Works perfect with javascript-libraries-syntax.vim

" Plug 'HerringtonDarkholme/yats.vim'

Plug 'pangloss/vim-javascript' 
	" does not mark JSX region in a way that 'suy/vim-context-commentstring' 
	" will understand

Plug 'MaxMEllon/vim-jsx-pretty' " JSX and TSX syntax pretty highlighting
	" On its own, coloring is not as elaborate as of 'vim-javascript'
	" Needed for 'suy/vim-context-commentstring' to 
	" understand JSX region to set proper commentstring.


" Plug 'othree/javascript-libraries-syntax.vim'
	" Note: may use this with `SyntaxComplete` for complittion of JS 
	" libraries without dedicated language server support

Plug 'gerw/vim-HiLinkTrace' " Syntax highlight Debugging
	" traces the highlighting linkages; ie. just what highlighting groups associated with the word under the cursor? Plus, when :HLT! is used to invoke hilight.vim, one gets syntax highlighting updates as one moves the cursor.
	" \hlt or :HLT : reveals a linked list of highlighting from the top-level
	" down to the bottom level for the cursor position

" Tabs, Windows and Buffers ----- {{{3

Plug 'dhruvasagar/vim-zoom'  " Toggle zoom in / out individual windows
	"Review: This is latest chronologically.
	"Alternatives are 
	"regedarek/ZoomWin -- 2014
	"szw/vim-maximizer -- 2015
	"
	"Usage: 
	"Cheatlist: <C-W>m to toggle zoom
	"Statusline API:
	" . g:zoom#statustext defaults to value 'status'. 
	" You may add this to your statusline like this :
	" set statusline+=%{zoom#statusline()}
	" Note: not cooperative with NERDTree

Plug 'vim-voom/VOoM' " Vim Outliner of Markups  emulates a two-pane text outliner
	"originaly .. start fold markers (fmr) with level numbers, that is {{{num,
	"or fmr1, fmr2 ..
	"Cheatlist: create outline by :Voom [MarkupMode]
	"MarkupMode can be: fmr - default, markdown, 
		"Paragraphs (:Voom paragraph{Blank|Indent|NoIndent}). Blocks of lines. 
		"Handy for sorting paragraphs with **:VoomSort**.
	"main Ex commands: Voom, Voomhelp, Voomexec, Voomlog.
	"for help: Voomhelp , :h voom-quickstart

" Text work ------ {{{3

" Snippets
Plug 'SirVer/ultisnips' " Snippets engine 
	" ISSUE: Snippets starting with special characters, like `=` or `;` do not
	" expand. This happens when completion is handled by **coc** plugin and
	" **coc-ultisnips** extension. Particularly, <tab> to list options and <enter>
	" to expand on selected. 
	" Related issue (thow reported on coc-snippets, not coc-ultisnips, which 
	" I use): [Snippets starting with special characters not triggered. · Issue #10 · neoclide/coc-snippets](https://github.com/neoclide/coc-snippets/issues/10)
	" > snippet completion only triggered with word character for now, you can
	" trigger it by use trigger key.
	"
	" Workaround: use ultisnips’ trigger ( `**`, UltiSnipsExpandTrigger) directly to
	" expand snippets which begin with such symbols. 
	" TODO: Or try coc-snippets (w/ ultisnips plugin) instead of coc-ultisnips 
	" as an answer to above issue hints that expansion may work also when
	" coc's trigger (<tab>) is used



" Plug 'honza/vim-snippets' " Snippet source, replaced with
							" my fork 
Plug 'iFork/vim-snippets' " my fork of 'honza/vim-snippets' 

Plug 'tpope/vim-surround'  " parentheses, brackets, quotes, XML tags, and more
	"Cheatlist:
	"cs<old><new>: change 
	"ysiw<new>,
	"ys3w( <–yank,surround 3 words with ()
	"yssb, yss) -- for line-wise 
	"ys$ to surround from here to end of line
	"ds<old> -- delete 
	"Using the f surrounding prompts for a function name.  ysiWfbaz<cr>
	"in Visual mode: S<p some tag details> 
	"in insert mode: <C-s><new>

" Plug 'jiangmiao/auto-pairs' " insert or delete brackets, parens, quotes in pair
	" ISSUE: autocompletion inside an arg object right below 
	" func block opening brace - inserts selected autocomplete but also
	" inserts a line above current line and goes there. e.g.
	" mongoose.Schema({
		" name: {type: String, require|} //<- if autocompleted will add a line above
	" }) 
	" ISSUE: backspace issue in viml comment
	" [Strange backspace behavior · Issue #272 · jiangmiao/auto-pairs](https://github.com/jiangmiao/auto-pairs/issues/272)
	" TODO: try workarounds or try DelimMate plugin !!!

Plug 'Raimondi/delimitMate' " insert mode auto-completion for quotes, parens,
							" brackets in pairs.
	" Review: seems smarter / more faultless, more fine grained configs than
	" 'jiangmiao/auto-pairs' 
	"Cheatlist:
	" <S-Tab> jump over a single closing delimiter or quote
	"	ISSUE: <S-Tab> acts as <backspace> in insert mode, "	probably due
	"	to remapping for coc.
	"	change those mappings or `imap <C-K> <Plug>delimitMateS-Tab`

	" <C-G>g jump over contiguous delimiters and/or quotes.


Plug 'tpope/vim-abolish' " search for, substitute, and abbreviate multiple variants of a word
			" variants may be uppercase / lower-case 
	"Cheatlist:
	"--Substitution
	" preserves original uppercase / lower-case styling in a word
	":S[ubvert]/child{,ren}/adult{,s}/g
	"--Coercion
	"convert between naming styles 
	" crs (coerce to snake_case). camelCase (crc), 
	" UPPER_CASE (cru), dash-case (cr-), 
	" space case (cr<space>), and Title Case (crt), etc.
	"--Abbreviation 
	"for common spelling error corrections 
	"following one command produces 48 abbreviations including all of the above.
	":Abolish {despa,sepe}rat{e,es,ed,ing,ely,ion,ions,or}  {despe,sepa}rat{}

" Format / Style ----- {{{3
" ---------------------------

Plug 'godlygeek/tabular' "text filtering and alignment
			"RequiredBy: 'vim-markdown'
			"Alternatives: plugin not mentioned by 'vim-markdown' 
			"is 'vim-easy-align'
			"Cheatlist: :Tabular/pattern

Plug 'junegunn/vim-easy-align' " text alignment
	"Alternatives: easier than tabular (installed too)
	"Cheatlist: after mapping 'ga' use: 
	"vipga<option><char> ; gaip<option><char>
	"optrion: <number>'th occurance
	" 	  * : all occurances
	" 	  ** : left/right alternating
	" 	  -, -2 : last, 2'nd from last
	" 	  <Enter>  : switch l/r/c alignments
	" 	  e.g.: gaip<CR><CR>2<Space>
	" <C-X> for regex in interactive mode 
	" <CTRL-P>. (P for Preview)
	" Note:
	" vim-easy-align ignores comments, while Tabular plugin works with comments as 
	" usual. :Tabularize /\/\/
	" link: https://github.com/junegunn/vim-easy-align/blob/master/EXAMPLES.md
	"Ignoring delimiters in comments or strings
		"  Delimiters highlighted as comments or strings are ignored by default
	"Aligning in-line comments
		"try -<space> as space before at end-of-the-line comment is considered 
		"as a last space as everithing inside comment is ignored 
		"OR
		"" Using regular expression /#/ (or //// for c comments)
		" " - "ig" is a shorthand notation of "ignore_groups"
		" :EasyAlign/#/{'ig':['String']}
		" " Or more concisely with the shorthand notation;
		" :EasyAlign/#/ig['String']

Plug 'AndrewRadev/splitjoin.vim' " Switch between single-line and multiline 
								 " forms of code
	" Alternative: FooSoft/vim-argwrap/
	" Pros: Has language specific awareness, like switching between single line,
	" multi-line arrow functions in JS.
	" Cheatlist:
    " gS to split a one-liner into multiple lines
    " gJ (cursor on first line of a block) to join a block into a single-line 

" Plug 'FooSoft/vim-argwrap' " Wrap and unwrap function arguments, lists, and
							 " dictionaries 
	" Droped in favor of 'splitjoin' due to lack of language awareness ( arrow
	" function reformating in JS)
	" Alternative: AndrewRadev/splitjoin.vim
	" Review: This has more formatting-related configs and is more
	" consistent (eg. joining works from anywhere inside a block, as a result
	" can collapse outer/parent blocks without going to the first line, as
	" opposed to 'splitjoin' plugin, where join works only from the first line
	" of the block).
	" Cons: Has no language specific awareness, like single line, multi-line
	" arrow functions in JS.
	" I Mapped toggle to gA

" Reading ----- {{{3
" --------------------

Plug 'wellle/context.vim' " shows context of currently visible buffer contents 
	" It is based on indentation and some regular expressions.
	"Cheatlist:
	" use :ContextEnable or :ContextToggle to enable it on demand.
	" :ContextEnableWindow,:ContextDisableWindow - only affects the current window.
	" :ContextDisable
	" :ContextPeek 


Plug 'junegunn/limelight.vim' "Hyperfocus-writing
	" dimms other paragraphs/lines
	" Best served with Goyo.vim plugin 
	"Cheatlist:
	"Limelight [0.0 ~ 1.0] // transparency factor 
	"Limelight! - turn off
	"Limelight!! [0.0 ~ 1.0] - toggle

Plug 'junegunn/goyo.vim' "Distraction-free writing
	" padding with margins
	"Cheatlist:
	" :Goyo // Toggle Goyo
	" :Goyo [dimension]  // Turn on or resize Goyo
	"  Width  :Goyo 120 // Height  :Goyo x30 // Both :Goyo 120x30
	" In percentage :Goyo 120x50%
	" With offsets :Goyo 50%+25%x50%-25%

Plug 'vim-utils/vim-man'  " View and grep man pages 
	" h: vim-man
	" Cheatlist:
	" `[[` and `]]` - jump to prev/next section heading
	" `Ctrl-]` / `K` , `Ctrl-T` -  going to manpage for word and jumping back
	" `g/` - start option search (example `--quiet` or `-q`)
	" `gx`,  `gf` 
	" `q` - quit `vim-man` buffer

	" :Mangrep foobar - same as :Mangrep 1 foobar (grepping in section 1 manpages)
	" :Mangrep * foobar - force search *all* man sections
	" :Mangrep -i 6 foobar - case insensitive search
	" :Mangrep 6 '(foo|bar|baz)' - regex search (Mangrep uses grep -E), 

	" ISSUE:
	" If you have vanilla vim the command will *block* and make vim unusable
	" until done (and it can take a while).
	" Installing vim-dispatch is recommended.

" Markdown ----- {{{3
" ---------------------
" ***
" * Note: some of markdown plugins sets foldcolumn=1, so left gutter becomes wider.
" ***

" Plug 'tpope/vim-markdown'
	" development version of Vim's included syntax highlighting and filetype plugins for Markdown. Generally you don't need to install these if you are running a recent version of Vim.
	"Note: there is No link or inline-backtick conceal like in plasticboy's
	"nor quotation formatting 

	
" Plug 'plasticboy/vim-markdown' "Syntax highlighting, matching rules and mappings for
	"the original Markdown and extensions.
	"Requires 'tabular' plugin to come before vim-markdown.
	"Cheatlist:
	"
	" ]] [[ ][ [] : navigating headers
	" e.g. [] : go to previous sibling header if any. <Plug>Markdown_MoveToPreviousSiblingHeader
	" ]c: go to Current header. <Plug>Markdown_MoveToCurHeader
	" ]u: go to parent header (Up). <Plug>Markdown_MoveToParentHeader
	" ge : follow named anchors 
	"
	" :TableFormat: Format the table under the cursor. Requires Tabular.
	"
	" :HeaderDecrease , HeaderIncrease
	" :Toc: create a quickfix vertical window navigable table of contents with the headers.
	" :Toch, :Toct: in tab  
	"
	"Issue: Links with a dot in their display name (ie. URL) breaks syntax highlighting for the rest of the file
	"https://github.com/plasticboy/vim-markdown/issues/419

Plug 'VVVFO/vim-markdown' "fork of plasticboy/vim-markdown with #104 and #419 fixed
	"Issue: does not format/conceal  emphasis `*a*`.
	"TODO: Report issue ? 

" Plug 'gabrielelana/vim-markdown'
	"seems to not conceal links 

"WARNING: combining 2 related plugins: VVVFO (plasticboy)'s markdown
"with pandoc-syntax plugin to have former's `gx` url opening and latters
"syntax highlighting (as VVVFO's version misses emphasising/italicizing on
"`*..*`

Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax'
	"netrw `gx` on web urls is not ok (it creates local copy of webpage to
	"open, after open, buffer is not useable, while plasticboy's is ok.
	"seems to lacl internal cross-refernce jumps, like `ge` of plasticboy
	"But has good conceal symbol replacers like lambda for ``` start
	"and - for closing ```.

" Plug 'SidOfc/mkdx' " adds some nice extra's for working with markdown
	" Incompatability: plasticboy's markdown plugin interferes with 
	" mkdx list indentation. Note that vim-polyglot plugin uses
	" plasticboy's markdown.
	" Note: Could not make `gx` (`gf`) mappings to open external URLs.
	" While plugin implemented the feature.
	" TO try: with pandoc-syntax but not with plasticboy

"Preview markdown on your modern browser with synchronised scrolling and
"flexible configuration
" If you have nodejs and yarn
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install' }
" Installation:
" If you don't have nodejs and yarn
" use pre build, add 'vim-plug' to the filetype list so vim-plug can update this plugin
" see: https://github.com/iamcco/markdown-preview.nvim/issues/50
" Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
"for help: https://github.com/iamcco/markdown-preview.nvim
"Note: requires local image links in .md files to be relative 
"paths - relative to the .md file's location.
"Note: Autoscrolls on normal mode scroll.
" For lagging autoscroll see its FAQ to update update time. 
"Cheatlist: :MarkdownPreview :MarkdownPreviewToggle

Plug 'suan/vim-instant-markdown', {'for': 'markdown'}
"Installation:
"Precond: Install the mini-server by running either:
" sudo npm -g install instant-markdown-d
"Note: resolves local image links as relative paths
"- relative to the current `pwd`.
"Issue: Autoscrolls only on text change.
"Issue link: https://github.com/suan/vim-instant-markdown/issues/180#issuecomment-633919557
"The scrolling will only work when file is modified, in insert mode.
"Just moving the cursor in any modes (including insert mode) will not trigger the autoscroll though, but that is expected based on the doc

" Plug 'reedes/vim-pencil' "
	"For editing prose-oriented file types such as text, markdown, mail, rst, tex, textile, and asciidoc
	"Adjusts navigation key mappings to suit the wrap mode
	"Cheatlist: 
	"Pencil - initialize pencil with auto-detect for the current buffer
	"SoftPencil (or PencilSoft) - initialize pencil with soft line wrap mode
	"HardPencil (or PencilHard) - initialize pencil with hard line break mode (and Vim’s autoformat)
	"seems to map j/k to gj/gk


" Commenting ----- {{{3

Plug 'tomtom/tcomment_vim' " extensible & universal comment vim-plugin that
				           " also handles embedded filetypes 
	" Cheatlist:
	" gc{motion}, gC{motion} - Toggle comments by line
	" g>{motion} / g<{motion}  :: Comment / uncomment region
    " g>c          :: Comment the current line
    " g>b          :: Comment the current region as block
	" Insert and normal mode maps
	" <c-_><c-_>   :: :TComment
    " <c-_><space> :: :TComment <QUERY COMMENT-BEGIN ?COMMENT-END>
	" <c-_>b       :: :TCommentBlock

" Plug 'tpope/vim-commentary' "comment stuff out
	" supports in-JSX region commenting 
	" as it respects commentstring changes within a file (e.g. by
	" 'suy/vim-context-commentstring')
	"Cheatlist: gc<motion/object>, gcc<number> - line, gcgc - adjacent lines 
	"ex command for toggling: Commentary

" Plug 'preservim/nerdcommenter' "comment stuff out 
				"see configs below
	"Review: Comparing to tpope's vim-commentary - tpope's supports text objects
	"natively, this nerd plugin needs a workaround like `vip`command
	"However this nerd ones has more styles and supports within line
	"partial commenting 
	"Issue: no context aware commenting, e.g. in JSX region. Now it cashes
	"commentstring of a file according to this user report: https://github.com/preservim/nerdcommenter/issues/17#issuecomment-447391324
	"which prevents plugins such as  'suy/vim-context-commentstring' to have
	"effect.
	"Or needs more configuration using its 'hooks' feature: https://github.com/preservim/nerdcommenter/pull/249 


Plug 'suy/vim-context-commentstring'
	" sets the value of ‘commentstring’ to a different value depending on the region of the file you are in.
	" Good for inside React JSX commenting
	" TODO: Needs configuration or fitting syntax highlighting plugin
	" respecting JSX
	" manual: https://raw.githubusercontent.com/suy/vim-context-commentstring/master/doc/context-commentstring.txt
	" User example: https://www.reddit.com/r/neovim/comments/bpor5u/vim_for_react_typescript_jsx/er6zyus/
	" uses tim popes commenter plugin
		" Plug 'tpope/vim-commentary'
		" Plug 'suy/vim-context-commentstring'
		" The last one is to comment Typescript and Typescript JSX with different comment styles accordingly.
		" // and {/* ... */}
		" Reserch user's configs at: 
			" https://github.com/Arelav/dotfiles and
			" https://github.com/Arelav/vim-context-commentstring/commit/b9e09f3a390c2714ca52053fb97a81333b145e32
			" clone and grep git history for commentstring


" Documentation --- {{{3

Plug 'heavenshell/vim-jsdoc', { 
	\ 'for': ['javascript', 'javascript.jsx','typescript'], 
	\ 'do': 'make install'
	\}
	" Documentation (like Doxygen): generates JSDoc block comments based on a function signature.
	" link: <https://github.com/heavenshell/vim-jsdoc>
	" Cheatlist:
	" :JsDoc 
		" Move cursor on function keyword line
		" Type :JsDoc to insert JSDoc
	" :JsDocFormat
		" Type :JsDocFormat
		" Insert JSDoc above the all signatures

Plug 'kkoomen/vim-doge', { 'do': { -> doge#install() } } 
	" (Do)cumentation (Ge)nerator 10+ languages
	" Cheatlist: 
	" <Leader>d , :DogeGenerate
	" '<Tab>' , '<S-Tab>' - jumping


" Runners, Testing, Build --- {{{3

Plug 'tpope/vim-dispatch' " Asynchronous build and test dispatcher 
	" Leverage the power of Vim's compiler plugins
	" :Make - dispatch.vim's `:make` wrapper
	" :Make! - for longer running tasks
	" :Copen
	" Compiler
	" default build tool is `make`, but you can switch it (and the
	" associated error parser) with `:compiler`.
	" `:Dispatch` command looks for a compiler for an executable and sets it up automatically.
		" :Dispatch testrb test/models/user_test.rb
	" If no compiler plugin is found, `:Dispatch` simply captures all output.

Plug 'vim-test/vim-test' " Run your tests
	" Dependency: dispatch.vim
	" :TestNearest :TestFile :TestSuite :TestLast
	" :TestVisit - Visits the test file from which you last run your tests 

" WebDev ----- {{{3 

" Plug 'tmhedberg/matchit' " extended % matching for HTML, LaTeX,
						 " " and many other languages
Plug 'andymass/vim-matchup' " Extends vim's % motion 
	" to language-specific words (such as if / endif)
	" enhances all of matchit's features
	"
	" Adds motions g%, [%, ]%, (like [(, ]) ) 
	" and z% (go to inside [count]th nearest inner contained block)
	" To include the close word, use either dv]% or vd]%. This is also compatible with vim's d]) and d]}
	" Operators over *backward exclusive* motions will instead exclude the position the cursor was on before the operator was invoked. 
	" Unlike ]%, % is an inclusive motion.
	"
	" text objects i% and a%

Plug 'ternjs/tern_for_vim', { 'do': 'npm install' }
	"RequiredBy: jsctags (jsctags requres tern in general),
	" recommended by 'tagbar' and installed for 'tagbar' to use 
	" 'jsctags'
	" link: https://github.com/majutsushi/tagbar/wiki#javascript
	" Check Alternative: check if instead 'tern_for_vim' we can install
	" 'tern' on our machine. In that case 'tagbar' maybe will not show
	" improved JS tags without additional configuration.

Plug 'baverman/vial' " python fw for plugins
	" RequiredBy: vial-http,
Plug 'baverman/vial-http' " Simple http rest tool
	" see: https://github.com/baverman/vial-http/tree/master/doc 
	" Review: as compared with 'aquach/vim-http-client':
		" - seems closer to HTTP request format, 
		" - resp status is in status line
		" - resp headers are in a buffer separate from body
		" - both pretty-indent json in response
		" - is tied to .http filetype and *highlights http syntax*,
		"   while the vim-http-client is filetype-agnostic and its triggers 
		"   work e.g. in .txt file and without http-syntax highlighting 
	"disable vim-airline for windows with vial-http buffers to see status codes.
	"Cheatlist:
	" Write requests in file with *.http 
	" Body should be in JSON format, i.e. double-quoted (not sigle quote),
	" no trailing comma, etc.
	" Headers are collected from top of the file to the current request
    " <leader><cr> executes request line under the cursor, :VialHttp 
    " <c-k>/<c-j> cycle throw response/request/response headers windows
	" Supports Templates

" Plug 'aquach/vim-http-client' " make HTTP requests from Vim
	" Dependency: python requests library.
	" Cheatlist: 
	" <Leader>tt , :HTTPClientDoRequest
		" # Comments start with #.
		" # $endpoint = http://httpbin.org //<-- Global vars
		" # First request.
		" # :foo = bar //<-- Local variable
		" //<method> <url> <-- url should include Host, instead of separate
								" Host header 
		" GET $endpoint/get
		" <header-name-1>: <header-value-1>
		" ...
		" <header-name-n>: <header-value-n>
		" //<body>
		" { "data": ":foo" } //<-- :foo was local var


" Plug 'diepm/vim-rest-console'
	":h vrc
	" Review: 
		" - has some network speed statistics line
		" - seems to lack response status code, headers.
		" - json body is not pretty-indented 
	"Cheatlist:
	" Set the buffer filetype to rest
	" trigger key (<C-j>)

		" global defaults above --
		" --
		" # host
		" http[s]://domain[:port]
		" [optional cUrl options]
		" [optional headers]
		" # query
		" POST /path/to/resource
		" [optional request body]



" DB /DataBases ----- {{{3
" TODO: TO-TRY
Plug 'tpope/vim-dadbod' " Modern database interface
" [tpope/vim-dadbod: dadbod.vim: Modern database interface for Vim](https://github.com/tpope/vim-dadbod)

" TODO: add and config with vim-dotenv

Plug 'kristijanhusak/vim-dadbod-ui' " UI for vim-dadbod
" [kristijanhusak/vim-dadbod-ui: Simple UI for https://github.com/tpope/vim-dadbod](https://github.com/kristijanhusak/vim-dadbod-ui)
"

" Meta Helpers ----- {{{3

Plug 'liuchengxu/vim-which-key' " shows keybindings in popup
" Key guide is an additional layer. It will only activate, when you do not 
" complete your input during the timeoutlen duration.
" Cheatlist: :WhichKey and :WhichKeyVisual 
" " By default timeoutlen is 1000 ms
" set timeoutlen=500
" TODO: To configure - The dictionary configuration is necessary to provide group names or a description text.

" Plug 'sjl/gundo.vim' " Graph your Vim undo tree, visualization
	" [Gundo - Visualize your Vim Undo Tree](https://docs.stevelosh.com/gundo.vim/)
	" Dependency:  Gundo requires Vim 7.3+ compiled with Python support, and Python 2.4+
	" CONS: its issue tracker on has gone, is not maintained
	"

Plug 'simnalamburt/vim-mundo' " undo tree / history visualizer  
	" [Mundo - Visualize your Vim Undo Tree](https://simnalamburt.github.io/vim-mundo/)
	" active fork of gundo
	" Dependency: `+python3` or `+python` compile option, Python > 2.4
	" Review: `undotree` had some features `gundo` didn't and it looks like `mundo` now copied them.
	" Seems like it offers more than `undotree`, e.g.:
	" - search undo history, more diff options (while `undotree` has diff integrated 
	" main buffer's gutter) 

" Plug 'mbbill/undotree' " undo tree / history visualizer 
	" LOG: disabled after vim SEGFAULT error (of yet unknown offender) 
	" happened after simple undo.
	" NOTE: BUT Rule of Thumb for debugging is to first disable non-VimL
	" plugins, in this case 'vim-mundo' better fits the bill as it is python
	" plugin.

Plug 'junegunn/vim-peekaboo' " see registers on the fly
	" extends " and @ in normal mode and <CTRL-R> in insert mode so you can see the contents of the registers

" (..initialize plugin system, endif) {{{3
call plug#end()
endif
" vim-plug does not require any extra statement other than plug#begin()
" and plug#end(). You can remove filetype off, filetype plugin indent on
" and syntax on from your .vimrc as they are automatically handled by
" plug#begin() and plug#end()

"########################################
" UI / Presentation / Visuals {{{1
"########################################
" TODO: move down - after plugin config ?

"set number  "show row number
set number relativenumber " Display relative numbers
set cursorline " Enable highlighting of the current line
set showcmd "show pending sequence of vim commands
set cmdheight=2 " Give more space for displaying messages.
	" Recommended: by coc-plugin: 
	"
set conceallevel=2 "enable conceal, Vim's standard conceal configuration.
	"for markdown formatting

" Searching
set hlsearch
set ignorecase " case insensitive searching
set smartcase " case-sensitive if expresson contains a capital letter
set incsearch " set incremental search, like modern browsers
set nolazyredraw " don't redraw while executing macros
" Clear highlighting on escape in normal mode
nnoremap <esc> :noh<return><esc>
nnoremap <esc>^[ <esc>^[

set scrolloff=1 " Minimum number of lines above and below cursor / offset
set wildmenu  " Display completion matches in a status line

" Change cursor shape in different modes
let &t_EI = "\033[2 q" " NORMAL  █
let &t_SI = "\033[5 q" " INSERT  |
let &t_SR = "\033[3 q" " REPLACE _

" Split separator 
" Make separator between split windows a continuous line.
" Note: some fonts may not work for this.
set fillchars+=vert:\│
hi VertSplit cterm=none ctermbg=none

"-----------------------------------------
" Sign column / Foldcolumn / gutter {{{2
"-----------------------------------------
" Recommended: by coc-plugin: 
" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.

autocmd BufRead,BufNewFile * setlocal signcolumn=yes
"set signcolumn=yes "left-hand margin before line numbers

"Certain filetypes that are not supposed to have the column:
autocmd FileType tagbar,nerdtree setlocal signcolumn=no

"-----------------------------------------
" Syntax Highlighting {{{2
"-----------------------------------------
"syntax on "or enable.
if !exists("g:syntax_on")
    syntax enable
endif
"The ":syntax enable" command will keep your current color settings.  This
"allows using ":highlight" commands to set your preferred colors before or
"after using this command.  If you want Vim to overrule your settings with the
"defaults, use: >
"    :syntax on
set showmatch " show matching braces

"-----------------------------------------
"	Python Syntax {{{3
"-----------------------------------------
" enable all Python syntax highlighting features
" it doesn't highlight issues on other files even 
" though it's not in autocmd. Don't know
let python_highlight_all = 1 

"-----------------------------------------
" Filetype Specific {{{2
"-----------------------------------------

"Quickfix and location list window
autocmd FileType qf
	\ set norelativenumber
	\| set nospell

" gitcommit messages window
autocmd FileType gitcommit
	\  set spell

autocmd FileType git,fugitiveblame,GV
	\  set nospell

" voomtree window
autocmd FileType voomtree
	\ set nospell

" manpager
autocmd FileType man
	\ setlocal colorcolumn=0

"-----------------------------------------
" Filetypes / Compound ft w/ subtypes {{{3
"-----------------------------------------
filetype plugin on " Filetype detection
"Filetype detection, set subtypes
"set subtype to doxygen to enable doxygen highlighting.
augroup cpp_project
  autocmd!
  autocmd BufRead,BufNewFile *.h,*.c set filetype=c.doxygen
  autocmd BufNewFile,BufReadPost *.hpp,*.cpp set filetype=cpp.doxygen "my addition
augroup END

augroup react_project
  autocmd!
  autocmd BufRead,BufNewFile *.js set filetype=javascript.jsx
  autocmd BufRead,BufNewFile *.ts set filetype=typescript.tsx
  " Recommended by: coc-tsserver. 
  " In coc.nvim, these filetypes are mapped to javascriptreact and typescriptreact because that's what tsserver uses.
augroup END

" TODO: set ft for .ts as typescript
" by default .ts file are not identified as typescript and .tsx files are not
" identified as typescript react file, so add following
" au BufNewFile,BufRead *.ts setlocal filetype=typescript
" au BufNewFile,BufRead *.tsx setlocal filetype=typescript.tsx


"-----------------------------------------
" File open handlers  {{{2
"-----------------------------------------
" To open images or other file links
" see :h gx

" if g:netrw_browsex_viewer exists, then it will be used to attempt to
" view files. 
" (but default seems fine).
"let g:netrw_browsex_viewer= "xdg-open" 
" or "gnome-open", "kfmclient exec"
"
"-----------------------------------------
" Non-printable / Invisible Chracters {{{2
"-----------------------------------------
"list command config to display non-printable chracters
":set list 
set listchars=tab:␉·	"that's Unicode character U+2409 SYMBOL FOR HORIZONTAL TABULATION 
			"followed by U+00B7 MIDDLE DOT
set listchars+=eol:⏎
set listchars+=trail:␠
set listchars+=nbsp:⎵ " for non-breaking space
set listchars+=space:␣ " for space

"-----------------------------------------
" Code folding settings {{{2
"-----------------------------------------
set foldmethod=syntax " fold based on ...
set foldnestmax=10 " deepest fold is 10 levels
set nofoldenable " don't fold by default
set foldlevel=1

"########################################
" Plugin Configs {{{1
"########################################
"-----------------------------------------
" Theme {{{2
"-----------------------------------------

"True color support

"set termguicolors "support true color terminal
	"NOTE: turn off if using simple terminal themes
	"as suggested by gruvbox

"Credit joshdick, vim-one theme
"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (empty($TMUX))
  if (has("nvim"))
  "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif

"-----------------------------------------
set background=dark "or light
"set background=light "or light

"-----------------------------------------
" solarized Theme {{{3
"colorscheme solarized
	"setting your terminal emulator's colorscheme to used the 
	"Solarized palette. Can download palettes for popular terminals
"-----------------------------------------
" gruvbox Theme {{{3
let g:gruvbox_italic=1
	"Most terminals don't handle italics right 
	"but in urxvt or gnome-terminal may try
	"TODO: NOTE: check terminal handling of italics
let g:gruvbox_contrast_dark='soft'
let g:gruvbox_contrast_light='medium'
	"soft medium hard
"colorscheme gruvbox

"-----------------------------------------
" gruvbox-material Theme {{{3
" See :help gruvbox-material-configuration for more

" set contrast
" this configuration option should be placed before `colorscheme gruvbox-material`
" available values: 'hard', 'medium'(default), 'soft'
let g:gruvbox_material_background = 'soft'
let g:airline_theme = 'gruvbox_material'

colorscheme gruvbox-material


"-----------------------------------------
" dracula Theme {{{3
"let g:airline_theme='dracula'
"colorscheme dracula
"-----------------------------------------
" nord Theme {{{3
"colorscheme nord
"-----------------------------------------
" one Theme {{{3
"let g:airline_theme='one' "airline integration
let g:one_allow_italics = 1
"colorscheme one
"-----------------------------------------
" purify Theme {{{3
"let g:airline_theme='purify'
"colorscheme purify
"-----------------------------------------
" darcula Theme {{{3 
"colorscheme darcula

"-----------------------------------------

" othree/javascript-libraries-syntax.vim {{{2
"-----------------------------------------
" let g:used_javascript_libs = 'react'

" For library IDs see readme.
" can use local vimrc to setup libraries used in project. Sample code for
" local vimrc.
" See readme: https://github.com/othree/javascript-libraries-syntax.vim

" airline {{{2 
"-----------------------------------------
" To apply  airline color scheme without reloading:
" e.g. :AirlineTheme gruvbox_material
let g:airline_powerline_fonts = 1
let g:airline_section_x = '' "hide filetype  (vim)

" vim-obsession integration
" default was  active [$], paused [S], I reversed. 
" 1st arg is for active, 2nd for paused
let g:airline_section_x = '%{ObsessionStatus("S", "$")}' " _x was for filetype

"vim-pencil integration
" default indicators are:
" let g:pencil#mode_indicators = {'hard': '␍', 'auto': 'ª', 'soft': '⤸', 'off': '',}"
" let g:airline_section_x = '%{PencilMode()}'

"let g:airline_section_y = '' "hide file encoding[fileformat] (utf-8[unix])

"coc integration
"h: coc-status
let g:airline_section_error = '%{airline#util#wrap(airline#extensions#coc#get_error(),0)}'
let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#coc#get_warning(),0)}'

"vim-zoom integration
" let g:airline_section_y = airline#section#create(['ffenc', " ", '%{zoom#statusline()}'])
" let g:airline_section_y = airline#section#create_right(['ffenc','%{zoom#statusline()}'])
let g:airline_section_z = airline#section#create_right(["%p%% : %l/%L \ue0a1 %c", '%{zoom#statusline()}'])
	"double quotes ("\u..") needed for unicode char code to be rendered as such 


" let g:airline_section_z = airline#section#create(['%{zoom#statusline()}'])

"vial-http integration
"disable vim-airline for windows with vial-http buffers:
au WinEnter,BufWinEnter __vial_* let w:airline_disabled=1

"Tip: read :h airline-advanced-customization
	"'ffenc' is file format, encoding part. See airline-predefined-parts 

" Smart tab line
"
" Automatically displays all buffers when there's only one tab open.
"let g:airline#extensions#tabline#enabled = 1
" Cutomizing tab separators for the tabline
" defining "straight" tabs:
"let g:airline#extensions#tabline#left_sep = ' '
"let g:airline#extensions#tabline#left_alt_sep = '|'
" Path formatter - how file paths are displayed in each individual tab
" as well as the current buffer indicator
"let g:airline#extensions#tabline#formatter = 'unique_tail_improved' 
	"default jsformatter unique_tail unique_tail_improved

"-----------------------------------------
" vim-surround {{{2
"-----------------------------------------
"add `let b:surround .... into ~/.vim/after/ftplugin/markdown.vim file.
"or in autocmd like following
"
"FIXME: `VjjSC` (```) breaks but `vjjSC` or `viwSC` works. 
"Surrounding Visual line selection with ``` - indents instead. 
"This only works after target lines are indented, first `VSC` indents selection
"Try changing mapping char from `C` to `c` ?
"Maybe `SC` is mapped elsewhere ? 
"Check pandoc plugin conflict ?
"
"markdown - bold, code block
autocmd FileType markdown,mkd,pandoc
	\  let b:surround_{char2nr('8')} = "**\r**"
	\| let b:surround_{char2nr('c')} = "```\r```"
"see also: https://stackoverflow.com/questions/47400961/surround-visual-text-with-more-than-1-character


" tagging URLs in Markdown
" credit: https://stackoverflow.com/questions/18168540/mapping-surround-vim-plugin-to-add-markdown-link-in-visual-mode
"TODO: Better put the :map commands into ~/.vim/ftplugin/{filetype}_mappings.vim. (This requires that you have :filetype plugin on.) instead of autocmd.
" use buffer-local mappings, otherwise once mentioned file type has been entered - mapping stays in effect,
autocmd FileType markdown,mkd
	\  nmap <buffer> ysl <Plug>Ysurroundiw]%a(<C-R>*)<Esc>
	\| vmap <buffer> Sl <Plug>VSurround]%a(<C-R>*)<Esc>

	" \  nmap <buffer> <leader>l <Plug>Ysurroundiw]%a(<C-R>*)<Esc>
	" \| vmap <buffer> <leader>l <Plug>VSurround]%a(<C-R>*)<Esc>

"-----------------------------------------
" Markdown--- {{{2

" tpope/vim-markdown {{{3
"-----------------------------------------
"
"to be able to specify language for code block as ```<language tag>
"add language tag per mask: 
"<markdown language tag (e.g. compatible with git)>=<vim filetype>
let g:markdown_fenced_languages = ['html', 'python', 'sh', 'js=javascript', 'cpp', 'vim']
" let g:markdown_syntax_conceal = 0

"-----------------------------------------
" vim-markdown plasticboy's or VVVFO's {{{3
"-----------------------------------------
"Syntax highlighting, matching rules and mappings for markdown

"Disabling syntax elements to combine/use this plugin with
"pandoc-syntax plugin's syntax formatting. 
"To disable conceal regardless of conceallevel setting
let g:vim_markdown_conceal = 0
"To disable math conceal with LaTeX math syntax enabled
let g:tex_conceal = ""
let g:vim_markdown_math = 1
"Disabling conceal for code fences
let g:vim_markdown_conceal_code_blocks = 0


" Disable Vim Markdown specific folding configuration
" to not interfere w pandoc folding, as concluded after debugging.
" Debugging E490 No fold found: comparing output of 
" `:so $VIMRUNTIME/bugreport.vim` for a) .md file opened and 
" b) when a new buffer is created and ft is set to pandoc from scratch:
"  a) (this works when ft remains markdown, not pandoc)
"  foldexpr=Foldexpr_markdown(v:lnum)    
"  b) (this is needed to folding to work when ft=pandoc)
"  foldexpr=pandoc#folding#FoldExpr()

let g:vim_markdown_folding_disabled = 1

" `ge`: to follow named anchors
let g:vim_markdown_follow_anchor = 1

let g:vim_markdown_toc_autofit = 1 "TOC window auto-fit when it's possible for it to shrink

"to be able to specify language for code block as ```<language tag>
"add language tag per mask: 
"<markdown language tag (e.g. compatible with git)>=<vim filetype>
let g:vim_markdown_fenced_languages = ['js=javascript', 'c++=cpp', 'viml=vim', 'bash=sh']
"Possible issue: vim-pencil's auto-wrap setting *interferes* with syntax highlighting. 
"Set SoftPencil (or HardPencil) to not break code block.

"Issue: This plugin interferes with `gx`, `gx` cannot open standard filenames
"e.g. "resource/pic.png" but can open markdown formatted links.
"A workaround is to format file names as markdown links, i.e. 
"wrap in [resource/pic.png](resource/pic.png) 
"Or another workaround is to unmap `gx` to keep netrw's `gx`  by following:
"see: https://github.com/plasticboy/vim-markdown/issues/353
"see: https://github.com/plasticboy/vim-markdown/issues/372
"see: https://github.com/plasticboy/vim-markdown/issues/301 for how to unmap
"`ge` too
"Note: Also pay attention to current `pwd` and relativity of links.
" nnoremap <Plug> <Plug>Markdown_OpenUrlUnderCursor

"-----------------------------------------
" 'gabrielelana/vim-markdown' {{{3
"-----------------------------------------
" let g:markdown_enable_conceal = 1

"-----------------------------------------
" 'vim-pandoc and vim-pandoc-syntax' {{{3
"-----------------------------------------
let g:pandoc#syntax#conceal#urls = 1
let g:pandoc#syntax#codeblocks#embeds#langs = [ 'html', 'css', 'python', 'bash=sh', 'js=javascript', 'cpp', 'vim']

"if vim-pandoc plugin is not istalled, i.e. vim-pandoc-syntax as a standalone
"plugin
" augroup pandoc_syntax
	" au! BufNewFile,BufFilePre,BufRead *.md set filetype=markdown.pandoc
" augroup END

"vim-pandoc 
"To combine pandoc-syntax plugin  with 'plasticboy's plugin vim-pandoc plugin 
"is needed with filetype change (to markdown.pandoc) turend off:
"Disable the pandoc filetype for *.mkd and *.md files. This way, vim-pandoc is
"still loaded, but uses the markdown syntax and the filetype is not modified.
"Related Issue: the fact that vim-pandoc changes the ft of markdown files to
"pandoc breaks every other markdown plugin.
"see: https://github.com/vim-pandoc/vim-pandoc/issues/70
let g:pandoc#filetypes#pandoc_markdown = 0

"-----------------------------------------
" 'SidOfc/mkdx' {{{3
"-----------------------------------------
" let g:mkdx#settings = {
		" \ 'highlight': { 'enable': 1 },
		" \ 'enter': { 'shift': 1 },
		" \ 'links': { 'external': { 'enable': 1 } },
		" \ 'toc': { 'text': 'Table of Contents', 'update_on_write': 1 },
		" \ 'fold': { 'enable': 1 },
		" \ 'image_extension_pattern': 'a\?png\|jpe\?g\|gif',
		" \ 'gf_on_steroids': 1
		" \ }

" :h mkdx-setting-gf-on-steroids
" :h mkdx-mapping-jump-to-file
" :h mkdx-mapping-open-external-file
"
"-----------------------------------------
" vim-instant-markdown {{{3
"-----------------------------------------

let g:instant_markdown_autoscroll = 1
"However, still Autoscrolls only on text change.

"-----------------------------------------
" vim-pencil--- {{{3
"-----------------------------------------

" augroup pencil
  " autocmd!
  " autocmd FileType markdown,mkd call pencil#init()
" augroup END

"-----------------------------------------
" VOom {{{2
"-----------------------------------------

"setting appropriate fold type for the filetype
let g:voom_ft_modes = {'markdown': 'markdown', 'pandoc': 'pandoc'}
" For MultiMarkdown or GitHub Markdown the pandoc mode may also be more
" appropriate to avoid false headlines in fenced code blocks.
" let g:voom_default_mode = 'fmr' "this default out of the box

"-----------------------------------------
" vim-easymotion {{{2
"-----------------------------------------

" Use uppercase target labels and type as a lower case
let g:EasyMotion_use_upper = 1
 " type `l` and match `l`&`L`
let g:EasyMotion_smartcase = 1
" Smartsign (type `3` and match `3`&`#`)
let g:EasyMotion_use_smartsign_us = 1

"-----------------------------------------
" xolox/vim-session {{{2
"-----------------------------------------

" If you don't want help windows to be restored:
set sessionoptions-=help
" Don't save hidden and unloaded buffers in sessions.
set sessionoptions-=buffers

let g:session_autoload = 'no' " default was 'prompt'
let g:session_autosave = 'no' " default was 'prompt'


" type :Session<Tab> to get completion of all available commands (actually
" this works with the other style as well if you type :*Session<Tab>)
let g:session_command_aliases = 1



"-----------------------------------------
" NERDTree / nerdtree {{{2
"-----------------------------------------
" NERDTree cheatlist:
" :NERDTreeToggle 

" open a NERDTree automatically when vim starts up if 
" no files and session (via -S) were specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") 
		\ && v:this_session == "" | NERDTree | endif
"open NERDTree automatically when vim starts up on opening a directory
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) 
		\ && !exists("s:std_in") | exe 'NERDTree' argv()[0] 
		\ | wincmd p | ene | exe 'cd '.argv()[0] | endif
"close vim if the only window left open is a NERDTree
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") 
			\ && b:NERDTree.isTabTree()) | q | endif
"ignore / hide files
" let g:NERDTreeIgnore = []
"  ["^.git$", "^node_modules$","^__pycache__$", "^venv$", "^.vscode$"]
"let g:NERDTreeShowHidden=1

"-----------------------------------------
" NERDTree-git-plugin / nerdtree-git-plugin {{{2
"-----------------------------------------
"NOTE: Dependency:  vim couldn't execute system function in fish. Add set shell=sh in your vimrc.

"variable to change flag symbols
let g:NERDTreeGitStatusIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }
"show ignored status
"let g:NERDTreeShowIgnoredStatus = 1 "a heavy feature may cost much more time


"-----------------------------------------
" nerdcommenter  {{{2
"-----------------------------------------
"Cheatlist: if <leader> == \
" \\cc ;  \\cm -- minimal comments ; \\cs -- sexy
" \\ca -- toggle to alternative delimiters
" \\c<space> -- toggle, topmost line decides \\ci -- invert line by line ; \\cu --uncomment  
" \\c$ ; cA -- append comment 
"

" " Add spaces after comment delimiters by default
" let g:NERDSpaceDelims = 1
"
" " Use compact syntax for prettified multi-line comments
" let g:NERDCompactSexyComs = 1
"
" " Align line-wise comment delimiters flush left instead of following code indentation
" "let g:NERDDefaultAlign = 'left'
"
" " Set a language to use its alternate delimiters by default
" "let g:NERDAltDelims_java = 1
"
" " Add your own custom formats or override the defaults
" "let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
"
" " Allow commenting and inverting empty lines (useful when commenting a region)
" let g:NERDCommentEmptyLines = 1
"
" " Enable trimming of trailing whitespace when uncommenting
" let g:NERDTrimTrailingWhitespace = 1
"
" " Enable NERDCommenterToggle to check all selected lines is commented or not 
" "let g:NERDToggleCheckAllLines = 1

"-----------------------------------------
" majutsushi/tagbar {{{2
"-----------------------------------------
"tags for JSON
let g:tagbar_type_json = {
    \ 'ctagstype' : 'json',
    \ 'kinds' : [
      \ 'o:objects',
      \ 'a:arrays',
      \ 'n:numbers',
      \ 's:strings',
      \ 'b:booleans',
      \ 'z:nulls'
    \ ],
  \ 'sro' : '.',
    \ 'scope2kind': {
    \ 'object': 'o',
      \ 'array': 'a',
      \ 'number': 'n',
      \ 'string': 's',
      \ 'boolean': 'b',
      \ 'null': 'z'
    \ },
    \ 'kind2scope': {
    \ 'o': 'object',
      \ 'a': 'array',
      \ 'n': 'number',
      \ 's': 'string',
      \ 'b': 'boolean',
      \ 'z': 'null'
    \ },
    \ 'sort' : 0
    \ }

" CSS 
" CSS support requires the use of Universal Ctags 
let g:tagbar_type_css = {
\ 'ctagstype' : 'Css',
    \ 'kinds'     : [
        \ 'c:classes',
        \ 's:selectors',
        \ 'i:identities'
    \ ]
\ }

" UltiSnips
" Its configuration is now included in current versions of UltiSnips.

" 'SirVer/ultisnips' {{{2
"-----------------------------------------
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="**"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
" list snippets in insert mode, a way on top of coc integration (coc-ultisnips 
" lists ultisnips snippets under coc's autocompletion list)
" let g:UltiSnipsListSnippets="<c-l>"
" you shouldn't map to `C-;`, as Vim can't reliably recognize that keystroke chord. Check out [the vimhelp FAQ](http://vimhelp.org/vim_faq.txt.html#faq-20.5) for the list of character combos you can use

" aquach/vim-http-client {{{2
"-----------------------------------------
let g:http_client_json_ft = "json" 
		" default filetype for json response is javascript


" wellle/context  {{{2
"-----------------------------------------

" disable by default to load on demand
let g:context_enabled = 0

" 'sjl/gundo.vim'  {{{2
"-----------------------------------------

" Issue: without following gundo complains that it needs python 2.4
" credit: [Gundo plugin requires python 2.4 when version 2.7 is installed - Vi and Vim Stack Exchange](https://vi.stackexchange.com/questions/6558/gundo-plugin-requires-python-2-4-when-version-2-7-is-installed)

" if has('python3')
"     let g:gundo_prefer_python3 = 1
" endif


" 'Raimondi/delimitMate'--- {{{2
" --------------------------------
" :h delimitMateExpansion
" NOTE: run :DelimitMateTest to find out mapping and other conflicts interfering
" with this plugin.

let g:delimitMate_expand_space = 1

" Influences the working of <BS>, <Del>, CTRL-W and CTRL-U in Insert
	" eol	allow backspacing over line breaks (join lines)
	" start	allow backspacing over the start of insert; CTRL-W and CTRL-U
	" 	stop once at the start of insert.
	" RequiredBy: DelimMate's delimitMate_expand_cr option to work
set backspace=indent,eol,start

" NOTE This feature requires that 'backspace' is either set to 2 or has "eol"
" and "start" as part of its value.
let g:delimitMate_expand_cr = 2

" Note: expand_cr was not working due to coc plugin's imap <cr> mapping as
" found out " in report by :DelimitMateTest

" 'vim-test/vim-test' {{{2

" Run strategy:
" vimterminal
" dispatch / dispatch_background  - Runs test commands with :Dispatch or :Dispatch!.
" let test#strategy = "dispatch"
let test#strategy = {
  \ 'nearest': 'vimterminal',
  \ 'file':    'dispatch',
  \ 'suite':   'basic',
\}

" let g:test#preserve_screen = 1

" Runners:
" JavaScript : Test runner detection works by checking which runner is listed
" in the package.json dependencies. When you have multiple runners listed in
" the package.json, specify a runner
" let g:test#javascript#runner = 'jest'

" All runners are loaded by default. To select which runners to load, set this
let test#enabled_runners = ["javascript#jest"]

" Compilers:
" TODO: As Dispatch.vim just determines the compiler, you need to make sure
" the Vim distribution or a plugin has a corresponding compiler for your test
" runner, or you may need to write a compiler plugin.
" See let g:dispatch_compilers[...] = ..

" jest
" `jest-vim-reporter`
" strips down most of the output for use with make or vim-test and the
" quickfix window.
" Dependency:, `npm install --save-dev jest-vim-reporter`
" global install gave error: `npm install -g jest-vim-reporter` 
let g:test#javascript#jest#options = '--reporters jest-vim-reporter'


" 'kkoomen/vim-doge'--- {{{2

" Defines the modes in which doge will jump forward and backward when
" interactive mode is active
" removing i would allow you to use <Tab> for autocompletion in insert mode.
" let g:doge_comment_jump_modes = ['n', 'i', 's']

" destructuring_props: Whether or not to generate @param tags for the
" destructured properties in a function expression.
let g:doge_javascript_settings = {
\  'destructuring_props': 1,
\}

" coc configs  {{{2
"-----------------------------------------
	"See: keybindings.vim

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c


" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}


"-----------------------------------------
" coc extensions configs  {{{3
"-----------------------------------------
"Coc.nvim will try to load javascript files in the folder $VIMCONFIG/coc-extensions
"let $VIMCONFIG = $VIMHOME "HAD NO effect, it still went int o.config/coc/extensions

" NOTE: Checking Completion source codes (e.g. [A], [B], etc):
" Use command :CocList sources to get current completion source list.

"make coc automatically install these extensions
let g:coc_global_extensions = ['coc-json'
				\, 'coc-clangd' 
				\, 'coc-lists' 
				\, 'coc-tsserver'
				\, 'coc-css'
				\, 'coc-ultisnips'
				\, 'coc-eslint'
				\, 'coc-jest'
				\ ]
				" \, 'coc-prettier'
				" \, 'coc-html'
				" \, 'coc-ultisnips', 'coc-emmet'
				" \, 'coc-react-refactor'
				" https://www.npmjs.com/package/coc-react-refactor
				" \, 'coc-yank'

" Coc Extension Notes

		" coc-tsserver: 
		" for javascript project, configure jsconfig.json to make tsserver understand your code.

		" TODO: configure tsserver linting/style rules to not duplicate that
		" of eslint (or vice versa). Example: sometimes tsserver and eslint
		" overlap on 'no-unused-var' rule and both provide codeActions.
		" However **tsserver** seems to be more
		" sensitive to this error and reports more specifically (e.g. not
		" read, not used) in more cases and provides more codeActions (i.e.
		" prefix with '_'). So **tsserver** fares better than eslint in this
		" respect. 

		" 'coc-eslint' 
		" " Dependency: npx eslint, local or global
		" (for global may need `eslint.nodePath` setting), also
		" related/peer plugins may be picky about that.
		" 
		" Cheatlist: use codeAction mappings
		" particularly \a<motion> as \ac (on all line) gives only codeActions 
		" from tsserver.
		" or `:CocCommand eslint.executeAutofix`
		"
		" Issue: reported - [Missing floating box for a 'comma-dangle' error message · Issue #73 · neoclide/coc-eslint](https://github.com/neoclide/coc-eslint/issues/73)
		" Past Resolved Issues: 
		" reported [CodeAction not found. Cannot read property 'range' of undefined · Issue #69 · neoclide/coc-eslint](https://github.com/neoclide/coc-eslint/issues/69)

		" coc-ultisnips
		" link: https://github.com/neoclide/coc-sources
		" Completion for items from ultisnips
		" Important: this source could be block and not work when ultisnips plugin not loaded in vim.
		" Q: Completion items of Ultisnips/neosnippet not shown.
		" A: It won't work when your ultisnips or neosnippet plugin not loaded. For better experience, consider use coc-snippets instead.
		" Config options: https://github.com/neoclide/coc-sources#configure

		" coc-snippets
		"snippets.ultisnips.directories: directories that searched for snippet files, could be subfolder in every $runtimepath or absolute paths, default: ["UltiSnips"]
		" Q: Where to get snippets?
		" A: One solution is install honza/vim-snippets which is widely used.
		"
		" Q: Do I need to install Ultisnips.
		" A: No! This extension is designed to work with or without Ultisnips, you can still install Ultisnips, but this extension would not run any code or read configuration from it.
		"
		" can add settings: snippets.ultisnips.directories: [ "UltiSnips", "gosnippets/UltiSnips" ], to load it.
		
		" coc-jest
		" ( close to, more specialized than 'vim-test/vim-test' plugin)


" Note: To install extensions with shell script, use command like:
" install coc-json & coc-html and exit
"vim -c 'CocInstall -sync coc-json coc-html|q'
"-----------------------------------------


"########################################
" General {{{1
"########################################
"Global settings to allow project specific settings
set exrc "source .vimrc file if  present, 
	"from working directory, a place to store 
	"project-specific configuration.
set secure "restrict usage of some commands in non-default .vimrc files; 
	"commands that write to file or execute shell commands 
	"are not allowed and map commands are displayed.

set mouse=a "interact with the tabs by clicking on them. also a + button 
set history=10000

" Vim as manpager, :h Man
runtime ftplugin/man.vim

" Keyboard Layout for Armenian, non-English languages
"
" out-of-box keymap files are in /usr/share/vim/vim82/keymap/
" vim looks up for <keymap-name>.vim files in <runtimepath>/keymap subdirs
" Switch in insert mode: Ctrl-^
" set keymap=armenian-eastern_utf-8
" alterantive keymap from ~/.vim/keymap
set keymap=armenian-phonetic-alt_utf-8

" To disable the keymap at Vim startup so that Insert mode uses Latin
" characters by default
set iminsert=0
set imsearch=0
" draws the caret with cyan color when layout is changed
highlight lCursor guifg=NONE guibg=Cyan

" Mappings
source $VIMHOME/keybindings.vim

"########################################
" Project Environment {{{1
"########################################
" Setting path variable
" for command gf (and related, <C-W><C-F> to open in new tab). 
" set Vim’s path option to contain a comma-separated 
" list of directories to look for the file.

"let &path.="src/include,/usr/include/AL,"	

"########################################
" Task/Project Specific Integrations {{{1
"########################################
 
"-----------------------------------------
" joplin and markdown integration {{{2

"buffer-local cd one level above current file's location.
"For markdown previewer and netrw gx to work on joplin notes
"from joplin/tmp folder ( lcd ../<dir of current file>)
autocmd FileType markdown,mkd
	\  silent! lcd %:p:h
	" \| lcd ../

" autocmd BufRead,BufNewFile */joplin/**
	" \  silent! lcd %:p:h
	" \| lcd ../

"Issue: When opening joplin notes in vim, markdown link highlighting does not work
"(using plasticboy vim-markdown). Need to manually reset filetype=markdown
"or `:syntax on`.
"
"A possible workaround (NO, this turn out to be off-target).
"NOTE: Actual problem seems to have relation with plasticboy's  
"Issue #104 and is fixed by VVVFO's fork.
"
"Old NOTE: but following does not fit my issue precisely, does not fix. 
" credit: https://stackoverflow.com/a/10515142 
" Enable syntax highlighting when buffers were loaded through :bufdo, which
" disables the Syntax autocmd event to speed up processing / to improve
" performance .
"
"augroup EnableSyntaxHighlighting
    " Filetype processing does happen, so we can detect a buffer initially
    " loaded during :bufdo through a set filetype, but missing b:current_syntax.
    " Also don't do this when the user explicitly turned off syntax highlighting
    " via :syntax off.
    " Note: Must allow nesting of autocmds so that the :syntax enable triggers
    " the ColorScheme event. Otherwise, some highlighting groups may not be
    " restored properly.
"    autocmd! BufWinEnter * nested if exists('syntax_on') && ! exists('b:current_syntax') && ! empty(&l:filetype) | syntax enable | endif

    " The above does not handle reloading via :bufdo edit!, because the
    " b:current_syntax variable is not cleared by that. During the :bufdo,
    " 'eventignore' contains "Syntax", so this can be used to detect this
    " situation when the file is re-read into the buffer. Due to the
    " 'eventignore', an immediate :syntax enable is ignored, but by clearing
    " b:current_syntax, the above handler will do this when the reloaded buffer
    " is displayed in a window again.
"    autocmd! BufRead * if exists('syntax_on') && exists('b:current_syntax') && ! empty(&l:filetype) && index(split(&eventignore, ','), 'Syntax') != -1 | unlet! b:current_syntax | endif
"augroup END


"########################################
" Tabs, Windows and Buffers {{{1
"########################################
set splitbelow splitright "when new files are open in split, 
			"they are opened on bottom and/or right

set switchbuf=useopen "make :make, :vimgrep and similar commands use
			"already displayed/open buffer
"set switchbuf=usetab,newtab "switching to the existing tab 
			"if the buffer is open, or creating a new one if not.

set hidden "opening a new file when the current buffer has unsaved 
	" changes causes files to be hidden instead of closed
	" But be carefull as you can close terminal with hidden unsaved changes
	" Recommended: by coc-plugin: " TextEdit might fail if hidden is not set.


"set autoread "is a must if you use git to change files in the background.


" Recommended: by coc-plugin: 
" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup


"########################################
" Style and Formatting Rules {{{1
"########################################
" TODO: move up to UI section (before plugins config but after plugin inti) ?

"-----------------------------------------
" Line {{{2
"-----------------------------------------
" Line length 
"highlight column number X 
set colorcolumn=80
highlight ColorColumn ctermbg=darkgray	
" highlight ColorColumn guibg=darkgray "for gui vim

"OR
"if exists('&colorcolumn')
"	set colorcolumn=80
"endif

set showbreak=↪ " Show line wrapping
set wrap "causes vim to soft-wrap on the edge of the window.
set linebreak "causes it to not break in the middle of a word, 
	"but this will only work if the list setting is not enabled. Normally
	"this isn’t a problem but if it’s not working you can :set nolist
	"Recommended by: `pencil` plugin

" 	gitcommit specific line rules {{{3 
"-----------------------------------------
autocmd FileType gitcommit
	\  setlocal colorcolumn=72
" set textwidth=72

" per tpope: On an 80 column terminal, if we subtract 4 columns for the indent on the left and 4 more for symmetry on the right, we’re left with 72 columns.

" 	Markdown specific line rules {{{3 
"-----------------------------------------
autocmd FileType markdown,mkd,pandoc
	\  setlocal colorcolumn=0

"-----------------------------------------
" Tabulations / Indention Rules {{{2
"-----------------------------------------
" set smartindent " is an old script, should not be used at all.
set autoindent
filetype plugin indent on

set shiftround " round indent to a multiple of 'shiftwidth'

"TODO: set noexpandtab " TABS!!! -- for makefile 
set smarttab " Enabling this will make the tab key (in insert mode) insert spaces
		" or tabs to go to the next indent of the next tabstop when the
		" cursor is at the beginning of a line (i.e. the only preceding 
		"characters are whitespace).

set tabstop=4       " The width of a TAB is set to 4.
                    " Still it is a \t. It is just that
                     " Vim will interpret it to be having
                     " a width of 4.
set shiftwidth=4  " Indents will have a width of 4
set softtabstop=4 " Sets the number of columns for a TAB
""   set expandtab     " Expand TABs to spaces

"-----------------------------------------
" 	Cpp specific tab / indention {{{3 
"-----------------------------------------
autocmd Filetype    cpp 
                \   set expandtab      

"-----------------------------------------
" 	Python specific tab / indention  {{{3
"-----------------------------------------
autocmd Filetype    python 
                \   set expandtab      


"-----------------------------------------
" 	WebDev specific tab / indention  {{{3
"-----------------------------------------
autocmd Filetype    html,javascript,json,css 
                \   set expandtab      
				\|	set shiftwidth=2 
				\|	set softtabstop=2 

"-----------------------------------------
" Comment Formatting {{{2
"-----------------------------------------
set comments=sl:/**,mb:*,elx:*/ "comment format, start line, middle block, endline, 
				"elx : command should end with */ and that it 
				"should automatically complete the comment when you hit just /
set formatoptions+=r  "auto-insert comment leader character


"########################################
" Low level config / teminal specific {{{1
"########################################
"TODO: may become obsolete with new updates ..
"TODO: move to other file
"TODO: return to this after 

"fixing shifted function keys in vim in xterm in gnome-terminal"
"credit: https://unix.stackexchange.com/questions/58361/how-to-fix-the-shifted-function-keys-in-vim-in-xterm-in-gnome-terminal

if &term =~ '^gnome'
execute "set <xUp>=\e[1;*A"
execute "set <xDown>=\e[1;*B"
execute "set <xRight>=\e[1;*C"
execute "set <xLeft>=\e[1;*D"
execute "set <xHome>=\e[1;*H"
execute "set <xEnd>=\e[1;*F"
execute "set <PageUp>=\e[5;*~"
execute "set <PageDown>=\e[6;*~"
execute "set <F1>=\eOP"
execute "set <F2>=\eOQ"
execute "set <F3>=\eOR"
execute "set <F4>=\eOS"
execute "set <xF1>=\eO1;*P"
execute "set <xF2>=\eO1;*Q"
"execute "set <xF2>=\eO2Q" " trying to get S-F2 work but it is sill confused
"with Q. S-F2 key works in Konsole but not in Gnome, Tilix, Kity 
execute "set <xF3>=\eO1;*R"
execute "set <xF4>=\eO1;*S"
execute "set <F5>=\e[15;*~"
execute "set <F6>=\e[17;*~"
execute "set <F7>=\e[18;*~"
execute "set <F8>=\e[19;*~"
execute "set <F9>=\e[20;*~"
execute "set <F10>=\e[21;*~"
execute "set <F11>=\e[23;*~"
execute "set <F12>=\e[24;*~"
endif

"See :help xterm-function-keys and :help xterm-modifier-keys.



